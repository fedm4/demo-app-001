{"version":3,"sources":["components/NavItem/NavItem.js","components/NavSearch/NavSearch.js","components/MainNav/MainNav.js","components/Card/Card.js","components/Table/Table.js","pages/Users/Users.js","components/MainHeader/MainHeader.js","App.js","serviceWorker.js","index.js"],"names":["NavItem","props","className","selected","to","label","NavSearch","icon","faSearch","type","placeholder","MainNav","id","Card","width","title","children","Table","columns","map","key","data","item","index","faEdit","faTimes","Users","useState","setData","useEffect","a","async","Axios","get","headers","res","slice","console","log","fetchData","MainHeader","faBars","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kYAeeA,G,YAXC,SAAAC,GAIZ,OACI,yBAAKC,UAAS,mBAHPD,EAAME,SAAW,WAAa,KAIjC,kBAAC,IAAD,CAAMC,GAAIH,EAAMG,IAAKH,EAAMI,U,cCKxBC,G,MATG,WACd,OACI,yBAAKJ,UAAU,wBACX,kBAAC,IAAD,CAAiBA,UAAU,cAAcK,KAAMC,MAC/C,2BAAON,UAAU,aAAaO,KAAK,OAAOC,YAAY,cCQnDC,G,MAbC,WACZ,OACI,yBAAKC,GAAG,YACJ,4BAAQA,GAAG,mBACP,6CAEJ,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASR,GAAG,IAAIC,MAAM,cACtB,kBAAC,EAAD,CAASD,GAAG,IAAIC,MAAM,QAAQF,UAAU,O,yBCIrCU,G,MAbF,SAAAZ,GACT,OACE,6BAASC,UAAS,eAAUD,EAAMa,QAChC,4BAAQZ,UAAU,eACd,4BAAKD,EAAMc,QAEf,yBAAKb,UAAU,gBACVD,EAAMe,aC2BJC,G,MAjCD,SAAAhB,GACV,OACI,2BAAOC,UAAU,SACb,+BACI,4BACKD,EAAMiB,QAAQC,KAAI,SAAAJ,GACX,OAAO,wBAAIK,IAAKL,GAAQA,MAEhC,oCACA,wCAGR,+BACKd,EAAMoB,KAAKF,KAAI,SAACG,EAAMC,GACnB,OACI,wBAAIH,IAAG,gBAAWG,IACbtB,EAAMiB,QAAQC,KAAI,SAAAC,GACX,OAAQ,wBAAIA,IAAG,gBAAWG,EAAX,eAAuBH,IAAQE,EAAKF,OAE3D,4BACI,kBAAC,IAAD,CAAiBlB,UAAU,YAAYK,KAAMiB,OAEjD,4BACI,kBAAC,IAAD,CAAiBtB,UAAU,cAAcK,KAAMkB,e,iBCvBzEP,EAAU,CAAC,KAAM,OAAQ,WAAY,SA4B5BQ,EAzBD,WAAO,IAAD,EACMC,mBAAS,IADf,mBACXN,EADW,KACLO,EADK,KAgBhB,OAHAC,qBAAU,YAXQ,mBAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEQE,IAAMC,IAAI,4CAA6C,CAACC,QAAS,CAC/E,8BAAgC,QAH1B,OAEJC,EAFI,OAKVP,EAAQO,EAAId,KAAKe,MAAM,EAAG,KAC1BC,QAAQC,IAAIjB,GANF,mHAYdkB,KACD,IAEC,6BACI,kBAAC,EAAD,CAAMzB,MAAM,YAAYC,MAAM,SAC1B,kBAAC,EAAD,CAAOG,QAASA,EAASG,KAAMA,OCbhCmB,G,MATI,WACf,OACI,4BAAQ5B,GAAG,eACP,kBAAC,IAAD,CAAiBL,KAAMkC,MAD3B,6BCmBOC,MAnBf,WACE,OACE,yBAAKxC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,0BAAMU,GAAG,QACP,kBAAC,EAAD,MACA,6BAASA,GAAG,gBACV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+B,KAAK,IAAIC,UAAWlB,MAG/B,4BAAQd,GAAG,oBCPDiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.47734542.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './NavItem.scss';\n\nconst NavItem = props => {\n    const selected = () => {\n        return props.selected ? \"selected\" : \"\";\n    };\n    return (\n        <div className={`nav-item ${selected()}`}>\n            <Link to={props.to}>{props.label}</Link>\n        </div>\n    );\n};\n\nexport default NavItem;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport './NavSearch.scss';\n\nconst NavSearch = () => {\n    return (\n        <div className=\"nav-search-container\">\n            <FontAwesomeIcon className=\"search-icon\" icon={faSearch}></FontAwesomeIcon>\n            <input className=\"nav-search\" type=\"text\" placeholder=\"Search\"></input>\n        </div>\n    );\n};\n\nexport default NavSearch;","import React from 'react';\nimport NavItem from '../NavItem/NavItem';\nimport NavSearch from '../NavSearch/NavSearch';\nimport './MainNav.scss';\n\nconst MainNav = () => {\n    return (\n        <nav id=\"main-nav\">\n            <header id=\"main-nav-header\">\n                <h1>Demo-App-001</h1>\n            </header>\n            <NavSearch></NavSearch>\n            <NavItem to=\"#\" label=\"Dashboard\"></NavItem>\n            <NavItem to=\"/\" label=\"users\" selected={true}></NavItem>\n        </nav>\n    );\n};\n\nexport default MainNav;","import React from 'react';\n\nimport './Card.scss';\n\nconst Card = props => {\n    return (\n      <section className={`card ${props.width}`}>\n        <header className=\"card-header\">\n            <h1>{props.title}</h1>\n        </header>\n        <div className=\"card-content\">\n            {props.children}\n        </div>\n      </section>  \n    );\n};\n\nexport default Card;","import React from 'react';\nimport './Table.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nconst Table = props =>{\n    return (\n        <table className=\"table\">\n            <thead>\n                <tr>\n                    {props.columns.map(title => {\n                            return <th key={title}>{title}</th>\n                    })}\n                    <th>Edit</th>\n                    <th>Delete</th>\n                </tr>\n            </thead>\n            <tbody>\n                {props.data.map((item, index) => {\n                    return (\n                        <tr key={`table-${index}`}>\n                            {props.columns.map(key =>{\n                                    return (<td key={`table-${index}-   ${key}`}>{item[key]}</td>);\n                            })}\n                            <td>\n                                <FontAwesomeIcon className=\"edit-icon\" icon={faEdit}></FontAwesomeIcon>\n                            </td>\n                            <td>\n                                <FontAwesomeIcon className=\"delete-icon\" icon={faTimes}></FontAwesomeIcon>\n                            </td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n    );\n};\n\nexport default Table;","import React, { useState, useEffect } from 'react';\nimport Card from '../../components/Card/Card';\nimport Table from '../../components/Table/Table';\nimport Axios from 'axios';\n\nconst columns = ['id', 'name', 'username', 'email'];\n\n\nconst Users = () => {\n    let [data, setData] = useState([]);\n    const fetchData = async () => {\n        try{\n            const res = await Axios.get('http://jsonplaceholder.typicode.com/users', {headers: {\n                'Access-Control-Allow-Origin' : '*'\n            }});\n            setData(res.data.slice(0, 10));\n            console.log(data);\n        } catch(e) {\n            throw e;\n        } \n    };\n    useEffect(()=>{\n        fetchData();\n    }, []);\n    return (\n        <div>\n            <Card width=\"fullwidth\" title=\"Users\">\n                <Table columns={columns} data={data}></Table>\n            </Card>\n        </div>\n    );\n};\n\nexport default Users;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport './MainHeader.scss';\n\nconst MainHeader = () => {\n    return (\n        <header id=\"main-header\">\n            <FontAwesomeIcon icon={faBars} />\n            Breadcrumb > Breadcrumb\n        </header>\n    );\n}\n\nexport default MainHeader;","import React from 'react';\nimport { BrowserRouter, Switch, Route }  from 'react-router-dom';\nimport './App.scss';\nimport MainNav from './components/MainNav/MainNav';\nimport Users from './pages/Users/Users';\nimport MainHeader from './components/MainHeader/MainHeader';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <MainNav></MainNav>\n        <main id=\"main\">\n          <MainHeader></MainHeader>\n          <section id=\"main-content\">\n            <Switch>\n              <Route path=\"/\" component={Users} />\n            </Switch>\n          </section>\n          <footer id=\"main-footer\"></footer>\n        </main>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}